class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  late GoogleMapController _mapController;
  List<Marker> allMarkers = [];
  List<Coffee> coffeeShops = getCoffeeShops();
  late PageController _pageController;
  int prevPage = 0;

  @override
  void initState() {
    super.initState();
    _pageController = PageController(viewportFraction: 0.8)
      ..addListener(_onScroll);
    setMarkers();
  }

  void setMarkers() {
    for (var shop in coffeeShops) {
      allMarkers.add(Marker(
        markerId: MarkerId(shop.shopName),
        infoWindow: InfoWindow(title: shop.shopName, snippet: shop.address),
        position: shop.locationCoords,
      ));
    }
  }

  void _onScroll() {
    if (_pageController.page!.toInt() != prevPage) {
      prevPage = _pageController.page!.toInt();
      moveCamera();
    }
  }

  void moveCamera() {
    _mapController.animateCamera(CameraUpdate.newCameraPosition(CameraPosition(
      target: coffeeShops[_pageController.page!.toInt()].locationCoords,
      zoom: 15.0,
      tilt: 50.0,
    )));
  }

  Future<Position> getUserLocation() async {
    LocationPermission permission = await Geolocator.requestPermission();
    return await Geolocator.getCurrentPosition();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: <Widget>[
          FutureBuilder(
            future: getUserLocation(),
            builder: (context, snapshot) {
              if (!snapshot.hasData) return const Center(child: CircularProgressIndicator());
              Position location = snapshot.data as Position;
              return GoogleMap(
                initialCameraPosition: CameraPosition(
                  target: LatLng(location.latitude, location.longitude),
                  zoom: 12.0,
                ),
                markers: Set.from(allMarkers),
                onMapCreated: (controller) => _mapController = controller,
              );
            },
          ),
          Positioned(
            bottom: 20.0,
            child: SizedBox(
              height: 180.0,
              width: MediaQuery.of(context).size.width,
              child: PageView.builder(
                controller: _pageController,
                itemCount: coffeeShops.length,
                itemBuilder: (BuildContext context, int index) {
                  return _coffeeShopList(index);
                },
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _coffeeShopList(int index) {
    return AnimatedBuilder(
      animation: _pageController,
      builder: (BuildContext context, Widget? widget) {
        double value = 1;
        if (_pageController.position.haveDimensions) {
          value = (_pageController.page! - index).abs();
          value = (1 - (value * 0.3)).clamp(0.0, 1.0);
        }
        return Center(
          child: SizedBox(
            height: Curves.easeInOut.transform(value) * 125.0,
            width: Curves.easeInOut.transform(value) * 300.0,
            child: widget,
          ),
        );
      },
      child: GestureDetector(
        onTap: () => moveCamera(),
        child: Container(
          margin: EdgeInsets.symmetric(horizontal: 10.0, vertical: 20.0),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(10.0),
          ),
          child: Row(
            children: [
              ClipRRect(
                borderRadius: BorderRadius.circular(10.0),
                child: Image.network(
                  coffeeShops[index].thumbNail,
                  height: 100.0,
                  width: 100.0,
                  fit: BoxFit.cover,
                ),
              ),
              SizedBox(width: 10.0),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      coffeeShops[index].shopName,
                      style: TextStyle(
                        fontSize: 16.0,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    Text(
                      coffeeShops[index].address,
                      style: TextStyle(fontSize: 12.0),
                    ),
                    Text(
                      coffeeShops[index].description,
                      style: TextStyle(fontSize: 10.0),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class Coffee {
  final String shopName;
  final String address;
  final String description;
  final String thumbNail;
  final LatLng locationCoords;

  Coffee({
    required this.shopName,
    required this.address,
    required this.description,
    required this.thumbNail,
    required this.locationCoords,
  });
}

List<Coffee> getCoffeeShops() {
  return [
    Coffee(
      shopName: 'Stumptown Coffee Roasters',
      address: '18 W 29th St',
      description: 'Direct-trade coffee with brewing gear & beans.',
      locationCoords: LatLng(40.745803, -73.988213),
      thumbNail: 'https://lh5.googleusercontent.com/p/AF1QipNNzoa4RVMeOisc0vQ5m3Z7aKet5353lu0Aah0a=w90-h90-n-k-no',
    ),
    Coffee(
      shopName: 'Stumptown Coffee Roasters',
      address: '18 W 29th St',
      description: 'Direct-trade coffee with brewing gear & beans.',
      locationCoords: LatLng(40.745803, -70.988213),
      thumbNail: 'https://lh5.googleusercontent.com/p/AF1QipNNzoa4RVMeOisc0vQ5m3Z7aKet5353lu0Aah0a=w90-h90-n-k-no',
    ),
    Coffee(
      shopName: 'Stumptown Coffee Roasters',
      address: '18 W 29th St',
      description: 'Direct-trade coffee with brewing gear & beans.',
      locationCoords: LatLng(40.745803, -75.988213),
      thumbNail: 'https://lh5.googleusercontent.com/p/AF1QipNNzoa4RVMeOisc0vQ5m3Z7aKet5353lu0Aah0a=w90-h90-n-k-no',
    ),
    Coffee(
      shopName: 'Stumptown Coffee Roasters',
      address: '18 W 29th St',
      description: 'Direct-trade coffee with brewing gear & beans.',
      locationCoords: LatLng(40.745803, -71.988213),
      thumbNail: 'https://lh5.googleusercontent.com/p/AF1QipNNzoa4RVMeOisc0vQ5m3Z7aKet5353lu0Aah0a=w90-h90-n-k-no',
    ),
    Coffee(
      shopName: 'Stumptown Coffee Roasters',
      address: '18 W 29th St',
      description: 'Direct-trade coffee with brewing gear & beans.',
      locationCoords: LatLng(40.745803, -72.988213),
      thumbNail: 'https://lh5.googleusercontent.com/p/AF1QipNNzoa4RVMeOisc0vQ5m3Z7aKet5353lu0Aah0a=w90-h90-n-k-no',
    ),
    Coffee(
      shopName: 'Stumptown Coffee Roasters',
      address: '18 W 29th St',
      description: 'Direct-trade coffee with brewing gear & beans.',
      locationCoords: LatLng(40.745803, -74.988213),
      thumbNail: 'https://lh5.googleusercontent.com/p/AF1QipNNzoa4RVMeOisc0vQ5m3Z7aKet5353lu0Aah0a=w90-h90-n-k-no',
    ),
    // Add more coffee shop entries as needed
  ];
}
